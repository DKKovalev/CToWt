apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.dkkovalev.ctowt"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            buildConfigField("String", "TWITCH_ENDPOINT", "\"https://api.twitch.tv/helix/\"")
            buildConfigField("String", "MIXER_ENDPOINT", "\"https://mixer.com/api/v1/\"")
            buildConfigField("String", "MIXER_CLIENT_ID", "\"" + getClientId("mixer.clientId") + "\"")
            buildConfigField("String", "TWITCH_CLIENT_ID", "\"" + getClientId("twitch.clientId") + "\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField("String", "TWITCH_ENDPOINT", "\"https://api.twitch.tv/helix/\"")
            buildConfigField("String", "MIXER_ENDPOINT", "\"https://mixer.com/api/v1/\"")
            buildConfigField("String", "MIXER_CLIENT_ID", "\"" + getClientId("mixer.clientId") + "\"")
            buildConfigField("String", "TWITCH_CLIENT_ID", "\"" + getClientId("twitch.clientId") + "\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "com.google.android.material:material:$androidx_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.transition:transition:$transition_version"
    implementation "androidx.cardview:cardview:$support_version"
    implementation "androidx.browser:browser:$support_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    //Dagger
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$logging_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    //Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    implementation "com.squareup.picasso:picasso:$picasso_version"
}

def getClientId(String name) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty(name)
}
